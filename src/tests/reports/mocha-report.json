{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-27T20:15:45.443Z",
    "end": "2018-04-27T20:15:58.267Z",
    "duration": 12824,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "590ef7d2-eddc-4db3-99fa-0c2b2deb128e",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "689ca53f-4ec3-4b45-807d-52c6d67d2ca5",
        "title": "GET /users/:userId",
        "fullFile": "/Users/edkelly/Projects/core/ob-core-node-example-microservice/tests/component/supertest/user-get.spec.js",
        "file": "/tests/component/supertest/user-get.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return 400 for invalid request",
            "fullTitle": "GET /users/:userId should return 400 for invalid request",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users/1').expect(400).end(error => {\n      expect(error).to.be.an('null');\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a1bf633b-0321-4157-a658-4e801eeb8667",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the correct response if downstream system returns response",
            "fullTitle": "GET /users/:userId should return the correct response if downstream system returns response",
            "timedOut": false,
            "duration": 10980,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users/1').set('x-lbg-txn-correlation-id', '12345').set('x-lbg-brand', 'LYDS').set('x-lbg-channel', 'RC').expect(200).end((error, response) => {\n      expect(error).to.be.an('null');\n      expect(response.body).to.deep.equal(expectedResponse);\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e613238d-df29-4864-a578-cd1f663b6ac3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the correct response if downstream system returns error",
            "fullTitle": "GET /users/:userId should return the correct response if downstream system returns error",
            "timedOut": false,
            "duration": 455,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users/2').set('x-lbg-txn-correlation-id', '12345').set('x-lbg-brand', 'LYDS').set('x-lbg-channel', 'RC').expect(400).end((error, response) => {\n      expect(error).to.be.an('null');\n      expect(response.body).to.deep.equal(expectedError);\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "979101d1-aa63-4c82-b372-5ba08f1be038",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a1bf633b-0321-4157-a658-4e801eeb8667",
          "e613238d-df29-4864-a578-cd1f663b6ac3",
          "979101d1-aa63-4c82-b372-5ba08f1be038"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 11489,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      },
      {
        "uuid": "e2ae7cfa-e372-4996-b5ab-56850169ace6",
        "title": "GET /users",
        "fullFile": "/Users/edkelly/Projects/core/ob-core-node-example-microservice/tests/component/supertest/user-list.spec.js",
        "file": "/tests/component/supertest/user-list.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return 400 for incorrect request",
            "fullTitle": "GET /users should return 400 for incorrect request",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users').expect(400).end(error => {\n      expect(error).to.be.an('null');\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4d12672c-a52b-4297-b5f8-1bd87d5304ad",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the correct response if downstream system returns response",
            "fullTitle": "GET /users should return the correct response if downstream system returns response",
            "timedOut": false,
            "duration": 548,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users').set('x-lbg-txn-correlation-id', '12345').set('x-lbg-brand', 'LYDS').set('x-lbg-channel', 'RC').expect(200).end((error, response) => {\n      expect(error).to.be.an('null');\n      expect(response.body).to.deep.equal(expectedResponse);\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "04f8e3aa-4026-4939-b901-5338ff4416f1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the correct response if downstream system returns error",
            "fullTitle": "GET /users should return the correct response if downstream system returns error",
            "timedOut": false,
            "duration": 390,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users').set('x-lbg-txn-correlation-id', '12345').set('x-lbg-brand', 'LYDS').set('x-lbg-channel', 'BB').expect(400).end((error, response) => {\n      expect(error).to.be.an('null');\n      expect(response.body).to.deep.equal(expectedError);\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3fe830dd-81fa-487a-9eac-942f84452dab",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4d12672c-a52b-4297-b5f8-1bd87d5304ad",
          "04f8e3aa-4026-4939-b901-5338ff4416f1",
          "3fe830dd-81fa-487a-9eac-942f84452dab"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 945,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 100000
  },
  "copyrightYear": 2018
}